// d3_script.js

// H√†m ch√≠nh: Load CSV v√† t·∫°o bar chart (ch·ªâ khi page l√† 'televisions')
function applyD3Styles(currentPage) {
  if (currentPage !== 'televisions') {
    return;  // Kh√¥ng l√†m g√¨ ·ªü page kh√°c
  }

  // Clear chart c≈© n·∫øu c√≥ (tr√°nh ch·ªìng ch√©o khi click l·∫°i)
  d3.select("#chart-container").selectAll("*").remove();

  // Step 1 & 2: Load v√† process CSV
  d3.csv("./data/d3.1.csv", d => {
    return {
      brand: d.Screen_Tech,
      count: +d["Count(Availability Status)"] // converts to number
    };
  }).then(data => {
    console.log(data);
    console.log(data.length);
    console.log(d3.max(data, d => d.count));
    console.log(d3.min(data, d => d.count));
    console.log(d3.extent(data, d => d.count));
    createBarChart(data);  // G·ªçi h√†m trong .then
  });
}

// Modular visualisation: Const arrow function nh·∫≠n data
const createBarChart = (data) => {
  // X√≥a SVG c≈© n·∫øu c√≥
  d3.select("#chart-container").selectAll("svg").remove();

  // K√≠ch th∆∞·ªõc SVG
  const svgWidth = 600;
  const svgHeight = 500;

  // Step 1: T·∫°o scale
  const xScale = d3.scaleLinear()
    .domain([0, d3.max(data, d => d.count)]) // domain = d·ªØ li·ªáu th·ª±c
    .range([0, 500-200]); // range = chi·ªÅu r·ªông v√πng v·∫Ω (fit SVG)

  const yScale = d3.scaleBand()
    .domain(data.map(d => d.brand))
    .range([0, svgHeight])
    .padding(0.1);

  // T·∫°o SVG
  const svg = d3.select("#chart-container")
    .append("svg")
    .attr("width", svgWidth)
    .attr("height", svgHeight);

  // üîπ Step 2: T·∫°o group g ƒë·ªÉ ch·ª©a rect + label
  const barAndLabel = svg
    .selectAll("g")
    .data(data)
    .join("g")
    .attr("transform", d => `translate(0, ${yScale(d.brand)})`);

  // üîπ Step 3a: Th√™m rectangles (b·∫°n c√≥ th·ªÉ comment code c≈© n·∫øu mu·ªën)
  barAndLabel
    .append("rect")
    .attr("x", 100) // ƒë·∫©y sang ph·∫£i ƒë·ªÉ ch·ª´a ch·ªó cho text brand
    .attr("y", 0)
    .attr("width", d => xScale(d.count))
    .attr("height", yScale.bandwidth())
    .attr("fill", "steelblue");

  // üîπ Step 3b: Th√™m text hi·ªÉn th·ªã t√™n brand
  barAndLabel
    .append("text")
    .text(d => d.brand)
    .attr("x", 95) // g·∫ßn b√™n tr√°i bar
    .attr("y", yScale.bandwidth() / 1.5)
    .attr("text-anchor", "end") // cƒÉn ph·∫£i text
    .style("font-family", "sans-serif")
    .style("font-size", "13px")
    .style("fill", "#333");

  // üîπ Step 3c: Th√™m text hi·ªÉn th·ªã count (gi√° tr·ªã s·ªë)
  barAndLabel
    .append("text")
    .text(d => d.count)
    .attr("x", d => 100 + xScale(d.count) + 4) // sau bar 1 ch√∫t
    .attr("y", yScale.bandwidth() / 1.5)
    .style("font-family", "sans-serif")
    .style("font-size", "13px")
    .style("fill", "#333");
};
